import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F  # F –≤–º–µ—Å—Ç–æ Text!
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram import F  # –í–æ–ª—à–µ–±–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä!
import aiohttp
import os
from dotenv import load_dotenv

# === –ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨ –ö .ENV ===
# –ó–∞–º–µ–Ω–∏–ª–∏ Murillo –Ω–∞ Muxillo –≤ –ø—É—Ç–∏
load_dotenv(r'C:\Users\Murillo\Desktop\Chat-Bot\.env')

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏, –∞ –Ω–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GPTUNNEL_API_KEY = os.getenv("GPTUNNEL_API_KEY")
CHANNEL_USERNAME = "@" + os.getenv("CHANNEL_USERNAME")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN:
    logging.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

if not GPTUNNEL_API_KEY:
    logging.error("–ö–ª—é—á GPTunnel –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

if not CHANNEL_USERNAME:
    logging.error("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    exit(1)

bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ===
user_data = {}

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üîÆ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞')],
        [KeyboardButton(text='‚ú® –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã')]
    ],
    resize_keyboard=True
)

subscription_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')]],
    resize_keyboard=True
)

# === –°–¢–ê–†–¢ ===
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –¥–µ–ª–∞—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ —Ç–≤–æ–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        "–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
        reply_markup=start_keyboard
    )

# === –í–´–ë–û–† –¢–ò–ü–ê ===
@dp.message(F.text.in_(['üîÆ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '‚ú® –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã']))
async def choose_type(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        'type': message.text,
        'step': 'waiting_subscription'
    }
    channel_name = os.getenv("CHANNEL_USERNAME")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è –∏–∑ .env
    channel_link = f"https://t.me/chislovayamagiya"  # –°—Ç—Ä–æ–∏–º –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Å—ã–ª–∫—É
    
    await message.answer(
    f"‚ú® –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª]({channel_link})", 
    parse_mode="Markdown",
    reply_markup=subscription_keyboard

    )

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===
@dp.message(F.text == '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è')
async def check_subscription(message: types.Message):
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        chat_member = await bot.get_chat_member(
            chat_id=CHANNEL_USERNAME,
            user_id=user_id
        )
        
        if chat_member.status in ['member', 'creator', 'administrator']:
            if user_id in user_data:
                user_data[user_id]['step'] = 'date'
            await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990):")
        else:
            await message.answer("üòî –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ===
@dp.message()
async def handle_input(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥
    if user_id not in user_data:
        await message.answer("–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
        
    current_step = user_data[user_id].get('step')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if current_step == 'date':
        try:
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–¢–´
            parts = text.split('.')
            if len(parts) != 3:
                raise ValueError
                
            day, month, year = map(int, parts)
            if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100):
                raise ValueError
                
            user_data[user_id]['date'] = text
            
            # –î–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            if user_data[user_id]['type'] == 'üîÆ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞':
                user_data[user_id]['step'] = 'time'
                await message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
            # –î–ª—è –º–∞—Ç—Ä–∏—Ü—ã —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
            else:
                user_data[user_id]['step'] = 'gender'
                await message.answer("üöª –í–≤–µ–¥–∏ —Å–≤–æ–π –ø–æ–ª (–ú –∏–ª–∏ –ñ):")
                
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000)")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    elif current_step == 'time':
        try:
            # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò
            parts = text.split(':')
            if len(parts) != 2:
                raise ValueError
                
            hours, minutes = map(int, parts)
            if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                raise ValueError
                
            user_data[user_id]['time'] = text
            user_data[user_id]['step'] = 'gender'
            await message.answer("üöª –í–≤–µ–¥–∏ —Å–≤–æ–π –ø–æ–ª (–ú –∏–ª–∏ –ñ):")
            
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:15)")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞
    elif current_step == 'gender':
        if text.lower() not in ['–º', '–∂']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª! –í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –ú –∏–ª–∏ –ñ")
            return
            
        user_data[user_id]['gender'] = text
        user_data[user_id]['step'] = 'city'
        await message.answer("üèôÔ∏è –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
    elif current_step == 'city':
        user_data[user_id]['city'] = text
        await generate_response(message)
    
    else:
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏ —Å /start")

# === –ó–ê–ü–†–û–° –ö GPTUNNEL ===
async def generate_response(message: types.Message):
    user_id = message.from_user.id
    data = user_data[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    if data['type'] == 'üîÆ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞':
        prompt = (
            f"–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. "
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['date']}, –≤—Ä–µ–º—è: {data['time']}, "
            f"–ø–æ–ª: {data['gender']}, –≥–æ—Ä–æ–¥: {data['city']}. "
            "–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å: –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞, –∞—Å–ø–µ–∫—Ç—ã –ø–ª–∞–Ω–µ—Ç, "
            "–¥–æ–º–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏."
        )
    else:
        prompt = (
            f"–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã. "
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['date']}, –ø–æ–ª: {data['gender']}, "
            f"–≥–æ—Ä–æ–¥: {data['city']}. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π: —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏, "
            "–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    async with aiohttp.ClientSession() as session:
        try:
            response = await session.post(
                'https://gptunnel.ru/v1/chat/completions',
                headers={
                    "Authorization": f"Bearer {GPTUNNEL_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "gpt-3.5-turbo",
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–∞–∫ –Ω–∞ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ]
                }
            )
            
            if response.status == 200:
                result = await response.json()
                analysis = result['choices'][0]['message']['content']
                
                full_response = (
                    f"{analysis}\n\n"
                    "‚ú® –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?\n"
                    f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —à–∞–ø–∫–µ –∫–∞–Ω–∞–ª–∞ {CHANNEL_USERNAME} "
                    "–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!"
                )
                
                await message.answer(full_response)
                
            else:
                error = await response.text()
                logging.error(f"GPTunnel error: {response.status} - {error}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logging.exception("GPTunnel request failed")
            await message.answer("‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
    